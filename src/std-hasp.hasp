
-- "These help provide alternatives to some of Haskell's syntax."
module Hasp ()

  type (List a) (:hs "[a]")

  -- "These are too useful not to have."
  deft inc (=> ((Num a)) (-> a a)) (+ 1)

  deft (dec x) (=> ((Num a)) (-> a a)) (- x 1)

  deft zero (=> ((Num a)) (-> a Bool)) (== 0)

  deft cons (-> a (List a) (List a)) (:hs "(:)")

  -- "Conditionals to replace if-then-else, guards, and case-of."
  defn if- (-> Bool a a a)
    (True  x _) x
    (False _ y) y

  defn condList (-> (List (tup Bool a)) a a)
    (Nil e) e
    ((: (tup test v) xs) e) (if- test v (condList xs e))

  defn caseList (=> ((Eq a)) (-> a (List (tup a b)) b b))
    (x Nil y) y
    (x (: (tup z v) ts) y) (if- (== x z) v (caseList x ts y))

  -- "Accessors, a replacement for records."
  type (Getter whole part) (-> whole part)
  type (Setter whole part) (-> whole part whole)
  data (Accessor whole part) (Accessor (Getter whole part) (Setter whole part))

  defn getter (-> (Accessor n a) (Getter n a))
    ((Accessor getter setter)) getter

  defn setter (-> (Accessor n a) (Setter n a))
    ((Accessor getter setter)) setter

  defn get (-> n (Accessor n a) a)
    (rec (Accessor getter setter))   (getter rec)

  defn set (-> n (Accessor n a) a n)
    (rec (Accessor getter setter) v) (setter rec v)

  defn update (-> n (Accessor n a) (-> a a) n)
    (rec (Accessor getter setter) f) (setter rec (f (getter rec)))

