
~~ "Author:     Jeff Newbern
    Maintainer: Jeff Newbern <jnewbern@nomaware.com>
    Time-stamp: <Mon Nov 10 11:59:14 2003>
    License:    GPL"

~~ "DESCRIPTION

Example 1 - Our first monad

Usage: Compile the code and execute the resulting program.
       It will print Dolly's maternal grandfather."

-- "everything you need to know about sheep"
data Sheep (Sheep String (Maybe Sheep) (Maybe Sheep))
defgetters Sheep name mother father

-- "we show sheep by name"
instance (Show Sheep) (def (show s) (show (name s)))

-- "comb is a combinator for sequencing operations that return Maybe"
defn comb (-> (Maybe a) (-> a (Maybe b)) (Maybe b))
  (Nothing  _) Nothing
  ((Just x) f) (f x)

-- "now we can use `comb` to build complicated sequences"
deft (maternalGrandfather s) (-> Sheep (Maybe Sheep))
  comb (comb (Just s) mother) father

deft (fathersMaternalGrandmother s) (-> Sheep (Maybe Sheep))
  comb (comb (comb (Just s) father) mother) mother

deft (mothersPaternalGrandfather s) (-> Sheep (Maybe Sheep))
  comb (comb (comb (Just s) mother) father) father

-- "this builds our sheep family tree"
deft breedSheep Sheep
  let= (adam   (Sheep "Adam"    Nothing      Nothing)
        eve    (Sheep "Eve"     Nothing      Nothing)
        uranus (Sheep "Uranus"  Nothing      Nothing)
        gaea   (Sheep "Gaea"    Nothing      Nothing)
        kronos (Sheep "Kronos" (Just gaea)  (Just uranus))
        holly  (Sheep "Holly"  (Just eve)   (Just adam))
        roger  (Sheep "Roger"  (Just eve)   (Just kronos))
        molly  (Sheep "Molly"  (Just holly) (Just roger)))
    Sheep "Dolly" (Just molly) Nothing

-- "print Dolly's maternal grandfather"
deft main (IO ()) (let= (dolly breedSheep) (print (maternalGrandfather dolly)))

-- "END OF FILE"

